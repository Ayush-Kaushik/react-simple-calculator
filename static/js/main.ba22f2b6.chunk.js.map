{"version":3,"sources":["context/CalculatorContext.tsx","components/Button.tsx","constants/Keys.constants.ts","components/Keypad.tsx","components/Screen.tsx","container/Calculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CalculatorDataContext","createContext","CalculatorDataProvider","props","useState","result","query","previousCalculations","calculatorState","setCalculatorState","Provider","value","handleClick","event","buttonEvent","target","console","log","prevState","calculationList","push","evaluate","error","children","Button","label","useContext","onClick","onSubmit","className","keys","Keypad","keyList","map","keyRow","keyListIndex","key","keyRowIndex","Screen","readOnly","Calculator","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba22f2b6.chunk.js","sourcesContent":["import { createContext, useState, MouseEvent } from 'react';\nimport { evaluate } from 'mathjs';\n\ninterface IcalculatorState {\n    query: string,\n    result: string,\n    previousCalculations: string[]\n}\n\nexport type CalculatorContextValue = {\n    calculatorState: IcalculatorState,\n    handleClick(event: MouseEvent<HTMLButtonElement>): void\n}\n\nexport const CalculatorDataContext = createContext<Partial<CalculatorContextValue>>({});\n\nexport const CalculatorDataProvider = (props: any): JSX.Element => {\n    const [calculatorState, setCalculatorState] = useState<IcalculatorState>({ result: '', query: '', previousCalculations: [] });\n\n    const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n        let buttonEvent = event.target as HTMLButtonElement;\n        console.log(buttonEvent.value);\n\n        switch (buttonEvent.value) {\n            case '=': {\n                if (calculatorState.query !== '') {\n                    try {\n                        setCalculatorState((prevState: IcalculatorState) => {\n\n                            console.log(prevState);\n\n                            let calculationList = prevState.previousCalculations;\n                            console.log(calculationList);\n                            calculationList.push(`${calculatorState.query} = ${evaluate(calculatorState.query)}\\n`);\n                            console.log(calculationList);\n\n                            return { previousCalculations: calculationList, query: '', result: evaluate(calculatorState.query) }\n                        });\n                    } catch (error) {\n                        setCalculatorState((prevState: IcalculatorState) => {\n                            return { ...prevState, query: '', result: error }\n                        });\n                    }\n                }\n\n                break;\n            }\n\n            case 'clear': {\n                setCalculatorState((prevState: IcalculatorState) => {\n                    return { ...prevState, query: '' }\n                });\n\n                break;\n            }\n\n            case 'delete': {\n                setCalculatorState((prevState: IcalculatorState) => {\n                    return { ...prevState, result: '' }\n                });\n\n                break;\n            }\n\n            case '': {\n                break;\n            }\n\n            default: {\n                setCalculatorState((prevState: IcalculatorState) => {\n                    return {\n                        ...prevState,\n                        query: prevState.query + buttonEvent.value,\n                        result: prevState.result\n                    }\n                })\n            }\n        }\n    }\n\n    return (\n        <CalculatorDataContext.Provider\n            value={{\n                calculatorState,\n                handleClick\n            }}\n\n        >\n            {props.children}\n        </CalculatorDataContext.Provider>\n    );\n};\n\n","import { useContext, MouseEvent } from 'react';\nimport \"../App.css\"\nimport { CalculatorDataContext, CalculatorContextValue } from '../context/CalculatorContext';\n\ntype ButtonProps = {\n    readonly label: string,\n    readonly value: string,\n}\n\nfunction Button({ label, value }: ButtonProps) {\n    const {handleClick} = useContext(CalculatorDataContext) as CalculatorContextValue;\n\n    const onSubmit = (event: MouseEvent<HTMLButtonElement>) => {\n        handleClick(event);\n    }\n\n\n    return (\n        <>\n            <button onClick={(event) => {\n                onSubmit(event)\n            }} value={value} className=\"Button\">\n                {label}\n            </button>\n        </>\n    );\n}\n\nexport default Button;","const keys = [\n  [\n    {\n      label: \"Clear\",\n      value: \"clear\",\n    },\n    {\n      label: \"Delete\",\n      value: \"delete\",\n    },\n    {\n      label: \"\",\n      value: \"\",\n    },\n    {\n      label: \"/\",\n      value: \"/\",\n    },\n  ],\n  [\n    {\n      label: \"7\",\n      value: \"7\",\n    },\n    {\n      label: \"8\",\n      value: \"8\",\n    },\n    {\n      label: \"9\",\n      value: \"9\",\n    },\n    {\n      label: \"*\",\n      value: \"*\",\n    },\n  ],\n  [\n    {\n      label: \"4\",\n      value: \"4\",\n    },\n    {\n      label: \"5\",\n      value: \"5\",\n    },\n    {\n      label: \"6\",\n      value: \"6\",\n    },\n    {\n      label: \"-\",\n      value: \"-\",\n    },\n  ],\n  [\n    {\n      label: \"1\",\n      value: \"1\",\n    },\n    {\n      label: \"2\",\n      value: \"2\",\n    },\n    {\n      label: \"3\",\n      value: \"3\",\n    },\n    {\n      label: \"+\",\n      value: \"+\",\n    },\n  ],\n  [\n    {\n      label: \"0\",\n      value: \"0\",\n    },\n    {\n      label: \"=\",\n      value: \"=\",\n    },\n  ],\n];\n\nexport default keys;\n","import Button from './Button';\nimport keyList from '../constants/Keys.constants';\nimport \"../App.css\";\n\nfunction Keypad() {    \n    return (\n        <div className=\"Keypad-layout\">\n            {\n                keyList.map((keyRow, keyListIndex) => {\n                    return (<div key={`div-key-${keyListIndex}`}> {\n                        keyRow.map((key, keyRowIndex) => {\n                            return (<Button \n                                key={`key-${key.label}-${keyRowIndex}`} \n                                label={key.label} \n                                value={key.value}\n                                />)\n                        })\n                    }\n                    </div>)\n                })\n            }\n        </div>\n    );\n}\n\nexport default Keypad;","import {useContext} from \"react\";\nimport { CalculatorDataContext } from '../context/CalculatorContext';\n\nfunction Screen() {\n const {calculatorState} = useContext(CalculatorDataContext);\n\n  return (\n    <div className=\"Display\">\n      <input value={calculatorState?.query} readOnly/>\n      <input value={calculatorState?.result} readOnly/>\n      <textarea value={calculatorState?.previousCalculations} readOnly/>\n    </div>\n  );\n}\n\nexport default Screen;\n","import Keypad from '../components/Keypad';\nimport Screen from '../components/Screen';\n\nfunction Calculator() {\n    return (\n        <div className=\"Calculator\">\n            <Screen/>\n            <Keypad />\n        </div>\n    );\n}\n\nexport default Calculator;","import Calculator from './container/Calculator';\nimport { CalculatorDataProvider } from './context/CalculatorContext';\n\nfunction App() {\n    return (\n        <>\n            <CalculatorDataProvider>\n                <Calculator />\n            </CalculatorDataProvider>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}